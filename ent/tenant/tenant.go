// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tenant type in the database.
	Label = "tenant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantName holds the string denoting the tenant_name field in the database.
	FieldTenantName = "tenant_name"
	// EdgeConfigurations holds the string denoting the configurations edge name in mutations.
	EdgeConfigurations = "configurations"
	// Table holds the table name of the tenant in the database.
	Table = "tenants"
	// ConfigurationsTable is the table that holds the configurations relation/edge. The primary key declared below.
	ConfigurationsTable = "tenant_configurations"
	// ConfigurationsInverseTable is the table name for the Configuration entity.
	// It exists in this package in order to avoid circular dependency with the "configuration" package.
	ConfigurationsInverseTable = "configurations"
)

// Columns holds all SQL columns for tenant fields.
var Columns = []string{
	FieldID,
	FieldTenantName,
}

var (
	// ConfigurationsPrimaryKey and ConfigurationsColumn2 are the table columns denoting the
	// primary key for the configurations relation (M2M).
	ConfigurationsPrimaryKey = []string{"tenant_id", "configuration_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Tenant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantName orders the results by the tenant_name field.
func ByTenantName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantName, opts...).ToFunc()
}

// ByConfigurationsCount orders the results by configurations count.
func ByConfigurationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConfigurationsStep(), opts...)
	}
}

// ByConfigurations orders the results by configurations terms.
func ByConfigurations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigurationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newConfigurationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigurationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ConfigurationsTable, ConfigurationsPrimaryKey...),
	)
}
