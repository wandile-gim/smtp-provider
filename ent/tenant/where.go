// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/wandile/smtp-provider/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldID, id))
}

// TenantName applies equality check predicate on the "tenant_name" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldTenantName, v))
}

// TenantNameEQ applies the EQ predicate on the "tenant_name" field.
func TenantNameEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldTenantName, v))
}

// TenantNameNEQ applies the NEQ predicate on the "tenant_name" field.
func TenantNameNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldTenantName, v))
}

// TenantNameIn applies the In predicate on the "tenant_name" field.
func TenantNameIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldTenantName, vs...))
}

// TenantNameNotIn applies the NotIn predicate on the "tenant_name" field.
func TenantNameNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldTenantName, vs...))
}

// TenantNameGT applies the GT predicate on the "tenant_name" field.
func TenantNameGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldTenantName, v))
}

// TenantNameGTE applies the GTE predicate on the "tenant_name" field.
func TenantNameGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldTenantName, v))
}

// TenantNameLT applies the LT predicate on the "tenant_name" field.
func TenantNameLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldTenantName, v))
}

// TenantNameLTE applies the LTE predicate on the "tenant_name" field.
func TenantNameLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldTenantName, v))
}

// TenantNameContains applies the Contains predicate on the "tenant_name" field.
func TenantNameContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldTenantName, v))
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenant_name" field.
func TenantNameHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldTenantName, v))
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenant_name" field.
func TenantNameHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldTenantName, v))
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenant_name" field.
func TenantNameEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldTenantName, v))
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenant_name" field.
func TenantNameContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldTenantName, v))
}

// HasConfigurations applies the HasEdge predicate on the "configurations" edge.
func HasConfigurations() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ConfigurationsTable, ConfigurationsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConfigurationsWith applies the HasEdge predicate on the "configurations" edge with a given conditions (other predicates).
func HasConfigurationsWith(preds ...predicate.Configuration) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := newConfigurationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.NotPredicates(p))
}
